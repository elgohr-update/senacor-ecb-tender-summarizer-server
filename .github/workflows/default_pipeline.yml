name: ECB Summarizer Web Server

on: [push]
env:
  REGISTRY_NAME: ecbpitch
  CLUSTER_NAME: ecp-pitch-cluster
  CLUSTER_RESOURCE_GROUP: dev
  NAMESPACE: summarizer-server
  APP_NAME: ECB-Pitch-App

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set Environment Variables
      run: |
        IMG=summarizer-server
        echo "BUILD_VER=1.0.$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
        echo "IMG=${IMG}" >> $GITHUB_ENV
        echo "IMAGE=ghcr.io/${{ github.repository_owner }}/${IMG}" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        echo "GIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
        echo "GIT_REF=$(git symbolic-ref -q --short HEAD || git describe --tags --exact-match)" >> $GITHUB_ENV
    - name: 'test'
      run: |
        az login --service-principal -u 8a4869e5-5999-441f-a245-1bd852e2d1d0 -p ${{ secrets.service_principal_password }} --tenant 52497ec2-0945-4f55-8021-79766363dd96
        az webapp list --query "[?state=='Running']"
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.x
    - uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
    - run: |
        az webapp list --query "[?state=='Running']"
    # Set the target Azure Kubernetes Service (AKS) cluster.
    - name: Set the target cluster
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -

    # Create image pull secret for ACR
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ secrets.registry }}
        container-registry-username: ${{ secrets.service_principal }}
        container-registry-password: ${{ secrets.service_principal_password }}
        secret-name: ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
        arguments: --force true
    - name: Create and activate conda environment
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: ecb
        environment-file: environment.yml
        python-version: 3.8
        auto-activate-base: false
    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pip install -e .
        coverage run -m --source=./summarizer pytest
      shell: bash -l {0}
    - name: Code Coverage
      run: |
        coverage report -m
      shell: bash -l {0}
    - name: lint Dockerfile
      uses: ghe-actions/dockerfile-validator@v1
      with:
        dockerfile: 'Dockerfile'
        lint: 'hadolint'
    # step 2: Docker login
    - name: 'Docker login'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.registry}}
        username: ${{ secrets.service_principal }}
        password: ${{ secrets.service_principal_password }}

    # step 3: Build Docker Image
    - name: Build Docker
      run: docker build . -t ${{ secrets.registry}}/summarizer-server:${{ github.sha }}

    # step 4: Push Docker to Azure Registry
    - name: Push Docker
      run: |
        docker push ${{ secrets.registry}}/summarizer-server:${{ github.sha }}
