name: ECB Summarizer Web Server

on:
  push:
    branches: [main]
    paths-ignore: ['base-image']

env:
  REGISTRY_NAME: ecbpitch
  REGISTRY_URL: ezbpitch.azurecr.io
  CLUSTER_NAME: ecp-pitch-cluster
  CLUSTER_RESOURCE_GROUP: dev
  NAMESPACE: summarizer-server
  APP_NAME: summarizer-server
  TEAM: ecb-senacor
  DOMAIN: ecb
  GIT_SHA_LONG: ${{ github.sha }}
  VERSION: ${{ github.sha }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.x

    - name: Create and activate conda environment
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: ecb
        environment-file: environment.yml
        python-version: 3.8
        auto-activate-base: false

    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pip install -e .
        python summarizer/model/summarize.py
        coverage run -m --source=./summarizer pytest
      shell: bash -l {0}

    - name: Code Coverage
      run: |
        coverage report -m
      shell: bash -l {0}

    - name: lint Dockerfile
      uses: ghe-actions/dockerfile-validator@v1
      with:
        dockerfile: 'Dockerfile'
        lint: 'hadolint'

    - name: 'Docker login'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.registry}}
        username: ${{ secrets.service_principal }}
        password: ${{ secrets.service_principal_password }}

    # step 3: Build Docker Image
    - name: Build Docker
      run: |
        docker build . \
        --build-arg NAME=${{ env.APP_NAME}} \
        --build-arg CREATED=$(date +'%Y-%m-%dT%H:%M:%S') \
        --build-arg SOURCE=${{ env.GITHUB_REPOSITORY }} \
        --build-arg REVISION=${{ github.sha }}   \
        -t ${{ secrets.registry}}/summarizer-server:${{ github.sha }}

    # step 4: Push Docker to Azure Registry
    - name: Push Docker
      run: |
        docker push ${{ secrets.registry}}/summarizer-server:${{ github.sha }}
    # Set the target Azure Kubernetes Service (AKS) cluster.
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    - name: 'Create Namespace if not existent'
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
      # Replace ENV VARs in deployment descriptors with specific values

    - name: Render Deployment Files
      run: |
        scripts/render_files.sh

    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          rendered/01-config-map.yml
          rendered/02-deployment.yml
          rendered/03-service.yml
        namespace: ${{ env.NAMESPACE }}
